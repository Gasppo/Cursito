{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/seguridadinfromatica/Desktop/FullStack/front/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ChakraProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/react\";\nimport { createClient, dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport theme from \"../theme\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"../utils/betterUpdateQuery\";\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    resetCSS: true,\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n      options: {\n        useSystemColorMode: true\n      },\n      children: [/*#__PURE__*/_jsxDEV(CSSReset, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/seguridadinfromatica/Desktop/FullStack/front/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","CSSReset","createClient","dedupExchange","fetchExchange","cacheExchange","theme","MeDocument","betterUpdateQuery","client","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,EAA4CC,QAA5C,QAA4D,kBAA5D;AACA,SAAmBC,YAAnB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,MAArE;AAEA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAGEC,UAHF,QAOO,sBAPP;AAQA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,MAAMC,MAAM,GAAGP,YAAY,CAAC;AAC1BQ,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CACTV,aADS,EAETE,aAAa,CAAC;AACZS,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCZ,UAAAA,iBAAiB,CACfW,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEd;AAAT,WAFe,EAGfU,OAHe,EAIf,OAAO;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAP,CAJe,CAAjB;AAMD,SARO;AASRC,QAAAA,KAAK,EAAE,CAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACrCZ,UAAAA,iBAAiB,CACfW,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEd;AAAT,WAFe,EAGfU,OAHe,EAIf,CAACO,MAAD,EAASH,KAAT,KAAmB;AACjB,gBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,qBAAOJ,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLC,gBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,eAAP;AAGD;AACF,WAZc,CAAjB;AAcD,SAxBO;AAyBRC,QAAAA,QAAQ,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACxCZ,UAAAA,iBAAiB,CACfW,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEd;AAAT,WAFe,EAGfU,OAHe,EAIf,CAACO,MAAD,EAASH,KAAT,KAAmB;AACjB,gBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,qBAAOJ,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLC,gBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WAZc,CAAjB;AAcD;AAxCO;AADH;AADG,GAAD,CAFJ,EAgDTtB,aAhDS;AALe,CAAD,CAA3B;;AAyDA,SAASwB,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAA8C;AAC5C,sBACE,QAAC,cAAD;AAAgB,IAAA,QAAQ,MAAxB;AAAyB,IAAA,KAAK,EAAExB,KAAhC;AAAA,2BACE,QAAC,iBAAD;AACE,MAAA,OAAO,EAAE;AACPyB,QAAAA,kBAAkB,EAAE;AADb,OADX;AAAA,8BAKE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;AAED,eAAeF,KAAf","sourcesContent":["import { ChakraProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/react\";\nimport { Provider, createClient, dedupExchange, fetchExchange } from \"urql\";\n\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\n\nimport theme from \"../theme\";\nimport {\n  LoginMutation,\n  LogoutMutation,\n  MeDocument,\n  MeQuery,\n  Query,\n  RegisterMutation,\n} from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"../utils/betterUpdateQuery\";\n\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  exchanges: [\n    dedupExchange,\n    cacheExchange({\n      updates: {\n        Mutation: {\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery<LogoutMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              () => ({ me: null })\n            );\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  };\n                }\n              }\n            );\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  };\n                }\n              }\n            );\n          },\n        },\n      },\n    }),\n    fetchExchange,\n  ],\n});\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <ChakraProvider resetCSS theme={theme}>\n      <ColorModeProvider\n        options={{\n          useSystemColorMode: true,\n        }}\n      >\n        <CSSReset />\n        <Component {...pageProps} />\n      </ColorModeProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}