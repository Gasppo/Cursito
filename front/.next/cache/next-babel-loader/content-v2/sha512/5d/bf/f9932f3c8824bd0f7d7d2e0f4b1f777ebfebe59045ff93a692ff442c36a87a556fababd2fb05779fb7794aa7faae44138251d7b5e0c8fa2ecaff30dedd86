{"ast":null,"code":"import _defineProperty from \"/Users/seguridadinfromatica/Desktop/FullStack/front/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/seguridadinfromatica/Desktop/FullStack/front/src/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ChakraProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/react\";\nimport { Provider, createClient, cacheExchange, dedupExchange, fetchExchange } from \"urql\";\nvar client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({}), fetchExchange]\n});\nimport theme from \"../theme\";\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    value: client,\n    children: /*#__PURE__*/_jsxDEV(ChakraProvider, {\n      resetCSS: true,\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ColorModeProvider, {\n        options: {\n          useSystemColorMode: true\n        },\n        children: [/*#__PURE__*/_jsxDEV(CSSReset, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/seguridadinfromatica/Desktop/FullStack/front/src/pages/_app.tsx"],"names":["ChakraProvider","ColorModeProvider","CSSReset","Provider","createClient","cacheExchange","dedupExchange","fetchExchange","client","url","fetchOptions","credentials","exchanges","theme","MyApp","Component","pageProps","useSystemColorMode"],"mappings":";;;;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,EAA4CC,QAA5C,QAA4D,kBAA5D;AACA,SACEC,QADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,aALF,QAMO,MANP;AAQA,IAAMC,MAAM,GAAGJ,YAAY,CAAC;AAC1BK,EAAAA,GAAG,EAAE,+BADqB;AAE1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFY;AAK1BC,EAAAA,SAAS,EAAE,CAACN,aAAD,EAAgBD,aAAa,CAAC,EAAD,CAA7B,EAAmCE,aAAnC;AALe,CAAD,CAA3B;AAQA,OAAOM,KAAP,MAAkB,UAAlB;;AAEA,SAASC,KAAT,OAA8C;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AAC5C,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAER,MAAjB;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,MAAxB;AAAyB,MAAA,KAAK,EAAEK,KAAhC;AAAA,6BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE;AACPI,UAAAA,kBAAkB,EAAE;AADb,SADX;AAAA,gCAKE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,gBALF,eAME,QAAC,SAAD,oBAAeD,SAAf;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;KAfQF,K;AAiBT,eAAeA,KAAf","sourcesContent":["import { ChakraProvider, ColorModeProvider, CSSReset } from \"@chakra-ui/react\";\nimport {\n  Provider,\n  createClient,\n  cacheExchange,\n  dedupExchange,\n  fetchExchange,\n} from \"urql\";\n\nconst client = createClient({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\",\n  },\n  exchanges: [dedupExchange, cacheExchange({}), fetchExchange],\n});\n\nimport theme from \"../theme\";\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ChakraProvider resetCSS theme={theme}>\n        <ColorModeProvider\n          options={{\n            useSystemColorMode: true,\n          }}\n        >\n          <CSSReset />\n          <Component {...pageProps} />\n        </ColorModeProvider>\n      </ChakraProvider>\n    </Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}